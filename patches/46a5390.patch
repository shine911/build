From 46a539061badadd3e806317fe8faed9b560260c8 Mon Sep 17 00:00:00 2001
From: oreiche <oliver.reiche@gmail.com>
Date: Fri, 23 May 2014 17:31:24 +0200
Subject: [PATCH] SystemUI: Swipe to float for notifications and recents

I was not happy with long press on notifications and recents
to open apps in floating mode. The long press duration kinda
breaks the UI interaction flow, which prevented me from
actually using floating windows. Therefore, I've created a
private modification, which enables floating mode for
notifications and recents by swiping to the left. This
greatly improves usability without strongly deviating from
stock UI experience, in strict accordance with PA's
philosophy. Changes are surgically implemented to keep the
probability of merge conflicts rather low. The code was
successfully tested on mako, hammerhead, tilapia, and manta.
Let the team discuss and decide whether or not this is a
worthy extension to PA.

Changes are split into two commits (PT1 & PT2).

PT2:
- Swipe recents for floating window:
Recents ScrollViews set separate trigger directions on
SwipeHelper (LEFT for vertical and DOWN for horizontal).
Directions are chosen as the opposite of the 'natural'
swipe-to-dismiss direction performed by the clear-all
button. onChildTriggered() will open the app in floating
window mode. To confirm this behavior for horizontal and
vertical recents views, separate settings confirmation
dialogs are shown with appropriate PA-style graphics (Gimp
sources on request).
- Swipe status bar notification for floating window:
Analogous to recents, here the NotificationRowLayout sets
the trigger direction to LEFT. It also got its own
confirmation dialog together with new hint graphics. After a
child is triggered, the app is started in floating window
mode by performing a click causing the notification to
disappear (exactly as it would anyway, if the app would have
been opened in 'normal' full-screen mode).

Conflicts:
	packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java
	packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
	packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java
	packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java

PS6: Rebase with hover changes and blacklist interface.
PS7: Fix build & NPE

Change-Id: Ib32e2c88033b1c143bd8dc8fa7394b002060d526
---

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 7310c6d..c002a11 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -2645,6 +2645,18 @@
         public static final String NAVBAR_RECENTS_CLEAR_ALL = "navbar_recents_clear_all";
 
         /**
+         * Swipe recents for floating windows option
+         * @hide
+         */
+        public static final String RECENTS_SWIPE_FLOATING = "recents_swipe_floating";
+
+        /**
+         * Swipe notification for floating window option
+         * @hide
+         */
+        public static final String STATUS_BAR_NOTIFICATION_SWIPE_FLOATING = "status_bar_notification_swipe_floating";
+
+        /**
          * Safe headset volume warning option
          * @hide
          */
@@ -2813,7 +2825,9 @@
             SAFE_HEADSET_VOLUME,
             PIE_STATE,
             NAVBAR_RECENTS_CLEAR_ALL,
-            RECENTS_SWITCH
+            RECENTS_SWITCH,
+            RECENTS_SWIPE_FLOATING,
+            STATUS_BAR_NOTIFICATION_SWIPE_FLOATING
         };
 
         // Settings moved to Settings.Secure
diff --git a/packages/SystemUI/res/drawable-nodpi/recents_swipe_floating_landscape.png b/packages/SystemUI/res/drawable-nodpi/recents_swipe_floating_landscape.png
new file mode 100644
index 0000000..81aebdd
--- /dev/null
+++ b/packages/SystemUI/res/drawable-nodpi/recents_swipe_floating_landscape.png
Binary files differ
diff --git a/packages/SystemUI/res/drawable-nodpi/recents_swipe_floating_portrait.png b/packages/SystemUI/res/drawable-nodpi/recents_swipe_floating_portrait.png
new file mode 100644
index 0000000..426dc87
--- /dev/null
+++ b/packages/SystemUI/res/drawable-nodpi/recents_swipe_floating_portrait.png
Binary files differ
diff --git a/packages/SystemUI/res/drawable-nodpi/status_bar_notification_swipe_floating.png b/packages/SystemUI/res/drawable-nodpi/status_bar_notification_swipe_floating.png
new file mode 100644
index 0000000..7900df4
--- /dev/null
+++ b/packages/SystemUI/res/drawable-nodpi/status_bar_notification_swipe_floating.png
Binary files differ
diff --git a/packages/SystemUI/res/values/pa_strings.xml b/packages/SystemUI/res/values/pa_strings.xml
index 3192799..c1300ac 100644
--- a/packages/SystemUI/res/values/pa_strings.xml
+++ b/packages/SystemUI/res/values/pa_strings.xml
@@ -88,6 +88,15 @@
     <string name="navbar_recents_clear_all_title">Clear all</string>
     <string name="navbar_recents_clear_all_message">Would you like the "recents button" to clear all apps?</string>
 
+    <!-- Swipe recents for floating window confirmation dialog -->
+    <string name="recents_swipe_floating_title">Swipe recents to float</string>
+    <string name="recents_swipe_floating_message_portrait">Would you like to swipe left to open apps in floating window?</string>
+    <string name="recents_swipe_floating_message_landscape">Would you like to swipe down to open apps in floating window?</string>
+
+    <!-- Swipe notification for floating window confirmation dialog -->
+    <string name="status_bar_notification_swipe_floating_title">Swipe notification to float</string>
+    <string name="status_bar_notification_swipe_floating_message">Would you like to swipe left to open apps in floating window?</string>
+
     <!-- Pie controls -->
     <string name="pie_date_format" translatable="false">ccc, dd MMM yyyy</string>
     <string name="pie_hour_format_12" translatable="false">hh:mm</string>
@@ -101,6 +110,8 @@
     <string name="safe_headset_volume" translatable="false">@*android:string/safe_headset_warning_title</string>
     <string name="navbar_recents_clear_all" translatable="false">@string/navbar_recents_clear_all_title</string>
     <string name="pie_state" translatable="false">@string/enable_pie_control_title</string>
+    <string name="recents_swipe_floating" translatable="false">@string/recents_swipe_floating_title</string>
+    <string name="status_bar_notification_swipe_floating" translatable="false">@string/status_bar_notification_swipe_floating_title</string>
 
     <!-- Switch apps -->
     <string name="enable_switch_apps_title">Switch apps</string>
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsCallback.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsCallback.java
index deb5670..a53139a 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsCallback.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsCallback.java
@@ -26,6 +26,7 @@
 
     void handleOnClick(View selectedView);
     void handleSwipe(View selectedView);
+    void handleFloat(View selectedView);
     void handleLongPress(View selectedView, View anchorView, View thumbnailView);
     void dismiss();
 }
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java
index f8adaaa..c8fb79f 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java
@@ -23,10 +23,12 @@
 import android.database.DataSetObserver;
 import android.graphics.Canvas;
 import android.os.Handler;
+import android.provider.Settings;
 import android.util.AttributeSet;
 import android.util.DisplayMetrics;
 import android.util.FloatMath;
 import android.util.Log;
+import android.util.SettingConfirmationHelper;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewConfiguration;
@@ -60,11 +62,21 @@
     // control clear all animation overload on quick double tap
     private boolean mAnimationDone = true;
 
+    private boolean mConfirmationDialogAnswered = true;
+    private boolean mDismissAfterConfirmation = false;
+
     public RecentsHorizontalScrollView(Context context, AttributeSet attrs) {
         super(context, attrs, 0);
         float densityScale = getResources().getDisplayMetrics().density;
         float pagingTouchSlop = ViewConfiguration.get(mContext).getScaledPagingTouchSlop();
         mSwipeHelper = new SwipeHelper(SwipeHelper.Y, this, densityScale, pagingTouchSlop);
+
+        if (Settings.System.getInt(context.getContentResolver(),
+            Settings.System.RECENTS_SWIPE_FLOATING, 0) == 1) {
+            mSwipeHelper.setTriggerEnabled(true);
+            mSwipeHelper.setTriggerDirection(SwipeHelper.DOWN);
+        }
+
         mFadedEdgeDrawHelper = FadedEdgeDrawHelper.create(context, attrs, this, false);
         mRecycledViews = new HashSet<View>();
         mHandler = new Handler();
@@ -224,6 +236,14 @@
         }
     }
 
+    public boolean isConfirmationDialogAnswered() {
+        return mConfirmationDialogAnswered;
+    }
+
+    public void setDismissAfterConfirmation(boolean dismiss) {
+        mDismissAfterConfirmation = dismiss;
+    }
+
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         if (DEBUG) Log.v(TAG, "onInterceptTouchEvent()");
         return mSwipeHelper.onInterceptTouchEvent(ev) ||
@@ -256,12 +276,45 @@
     }
 
     public void onChildTriggered(View v) {
+        mCallback.handleFloat(v);
     }
 
     public void onBeginDrag(View v) {
         // We do this so the underlying ScrollView knows that it won't get
         // the chance to intercept events anymore
         requestDisallowInterceptTouchEvent(true);
+
+        final Context context = getContext();
+        int swipeStatus = Settings.System.getInt(context.getContentResolver(),
+                Settings.System.RECENTS_SWIPE_FLOATING, 0);
+
+        if (swipeStatus == 0 || swipeStatus == 3) {
+            mConfirmationDialogAnswered = false;
+            mDismissAfterConfirmation = false;
+
+            SettingConfirmationHelper.showConfirmationDialogForSetting(
+                context,
+                context.getString(R.string.recents_swipe_floating_title),
+                context.getString(R.string.recents_swipe_floating_message_landscape),
+                context.getResources().getDrawable(R.drawable.recents_swipe_floating_landscape),
+                Settings.System.RECENTS_SWIPE_FLOATING,
+                new SettingConfirmationHelper.OnSelectListener() {
+                    @Override
+                    public void onSelect(boolean enabled) {
+                        if (enabled){
+                            mSwipeHelper.setTriggerEnabled(true);
+                            mSwipeHelper.setTriggerDirection(SwipeHelper.DOWN);
+                        }
+                        // Dialog finished, recents can safely be dismissed later
+                        mConfirmationDialogAnswered = true;
+                        if (mDismissAfterConfirmation) {
+                            // Recents is already empty, so dismiss right after
+                            // this dialog
+                            mCallback.dismiss();
+                        }
+                    }
+                });
+        }
     }
 
     public void onDragCancelled(View v) {
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
index 0d2ff85..896b41f 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
@@ -109,6 +109,8 @@
         public void drawFadedEdges(Canvas c, int left, int right, int top, int bottom);
         public void setOnScrollListener(Runnable listener);
         public void swipeAllViewsInLayout();
+        public boolean isConfirmationDialogAnswered();
+        public void setDismissAfterConfirmation(boolean dismiss);
     }
 
     private final class OnLongClickDelegate implements View.OnLongClickListener {
@@ -279,6 +281,8 @@
         mRecentTasksLoader = RecentTasksLoader.getInstance(context);
         mRecentsActivity = (RecentsActivity) context;
         a.recycle();
+        mNotificationManager = INotificationManager.Stub.asInterface(
+            ServiceManager.getService(Context.NOTIFICATION_SERVICE));
     }
 
     public int numItemsInOneScreenful() {
@@ -761,7 +765,12 @@
             // mListAdapter.notifyDataSetChanged();
 
             if (mRecentTaskDescriptions.size() == 0) {
-                dismissAndGoBack();
+                // Instruct (possibly) running on-the-spot dialog to dismiss recents
+                mRecentsContainer.setDismissAfterConfirmation(true);
+                if (mRecentsContainer.isConfirmationDialogAnswered()) {
+                    // No on-the-spot dialog running, safe to dismiss now
+                    dismissAndGoBack();
+                }
             }
         } else {
             dismissAndGoBack();
@@ -779,6 +788,49 @@
                     mContext.getString(R.string.accessibility_recents_item_dismissed, ad.getLabel()));
             sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);
             setContentDescription(null);
+        }
+    }
+
+    public void handleFloat(View view) {
+        launchFloating(view);
+    }
+
+    private void launchFloating(View view) {
+        ViewHolder viewHolder = (ViewHolder) view.getTag();
+        if (viewHolder != null) {
+            final TaskDescription ad = viewHolder.taskDescription;
+            if (ad == null) {
+                Log.v(TAG, "Not able to find activity description for floating task; view=" + view +
+                      " tag=" + view.getTag());
+                return;
+            }
+
+            String currentViewPackage = ad.packageName;
+            boolean allowed = true; // default on
+            try {
+                // preloaded apps are added to the blacklist array when is recreated, handled in the notification manager
+                allowed = mNotificationManager.isPackageAllowedForFloatingMode(currentViewPackage);
+            } catch (android.os.RemoteException ex) {
+                // System is dead
+            }
+            if (!allowed) {
+                dismissAndGoBack();
+                String text = mContext.getResources().getString(R.string.floating_mode_blacklisted_app);
+                int duration = Toast.LENGTH_LONG;
+                Toast.makeText(mContext, text, duration).show();
+                return;
+            } else {
+                dismissAndGoBack();
+            }
+            view.post(new Runnable() {
+                @Override
+                public void run() {
+                    Intent intent = ad.intent;
+                    intent.setFlags(Intent.FLAG_FLOATING_WINDOW
+                                    | Intent.FLAG_ACTIVITY_NEW_TASK);
+                    mContext.startActivity(intent);
+                }
+            });
         }
     }
 
@@ -808,11 +860,6 @@
         thumbnailView.setSelected(true);
         final PopupMenu popup =
             new PopupMenu(mContext, anchorView == null ? selectedView : anchorView);
-        // initialize if null
-        if (mNotificationManager == null) {
-            mNotificationManager = INotificationManager.Stub.asInterface(
-                    ServiceManager.getService(Context.NOTIFICATION_SERVICE));
-        }
         mPopup = popup;
         popup.getMenuInflater().inflate(R.menu.recent_popup_menu, popup.getMenu());
         popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
@@ -829,36 +876,7 @@
                         throw new IllegalStateException("Oops, no tag on view " + selectedView);
                     }
                 } else if (item.getItemId() == R.id.recent_launch_floating) {
-                    ViewHolder viewHolder = (ViewHolder) selectedView.getTag();
-                    if (viewHolder != null) {
-                        final TaskDescription ad = viewHolder.taskDescription;
-                        String currentViewPackage = ad.packageName;
-                        boolean allowed = true; // default on
-                        try {
-                            // preloaded apps are added to the blacklist array when is recreated, handled in the notification manager
-                            allowed = mNotificationManager.isPackageAllowedForFloatingMode(currentViewPackage);
-                        } catch (android.os.RemoteException ex) {
-                            // System is dead
-                        }
-                        if (!allowed) {
-                            dismissAndGoBack();
-                            String text = mContext.getResources().getString(R.string.floating_mode_blacklisted_app);
-                            int duration = Toast.LENGTH_LONG;
-                            Toast.makeText(mContext, text, duration).show();
-                            return true;
-                        } else {
-                            dismissAndGoBack();
-                        }
-                        selectedView.post(new Runnable() {
-                            @Override
-                            public void run() {
-                                Intent intent = ad.intent;
-                                intent.setFlags(Intent.FLAG_FLOATING_WINDOW
-                                        | Intent.FLAG_ACTIVITY_NEW_TASK);
-                                mContext.startActivity(intent);
-                            }
-                        });
-                    }
+                    launchFloating(selectedView);
                 } else {
                     return false;
                 }
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java
index 8266c86..31ee933 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java
@@ -23,10 +23,12 @@
 import android.database.DataSetObserver;
 import android.graphics.Canvas;
 import android.os.Handler;
+import android.provider.Settings;
 import android.util.AttributeSet;
 import android.util.DisplayMetrics;
 import android.util.FloatMath;
 import android.util.Log;
+import android.util.SettingConfirmationHelper;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewConfiguration;
@@ -60,11 +62,20 @@
     // control clear all animation overload on quick double tap
     private boolean mAnimationDone = true;
 
+    private boolean mConfirmationDialogAnswered = true;
+    private boolean mDismissAfterConfirmation = false;
+
     public RecentsVerticalScrollView(Context context, AttributeSet attrs) {
         super(context, attrs, 0);
         float densityScale = getResources().getDisplayMetrics().density;
         float pagingTouchSlop = ViewConfiguration.get(mContext).getScaledPagingTouchSlop();
         mSwipeHelper = new SwipeHelper(SwipeHelper.X, this, densityScale, pagingTouchSlop);
+
+        if (Settings.System.getInt(context.getContentResolver(),
+            Settings.System.RECENTS_SWIPE_FLOATING, 0) == 1) {
+            mSwipeHelper.setTriggerEnabled(true);
+            mSwipeHelper.setTriggerDirection(SwipeHelper.LEFT);
+        }
 
         mFadedEdgeDrawHelper = FadedEdgeDrawHelper.create(context, attrs, this, true);
         mRecycledViews = new HashSet<View>();
@@ -231,6 +242,14 @@
         }
     }
 
+    public boolean isConfirmationDialogAnswered() {
+        return mConfirmationDialogAnswered;
+    }
+
+    public void setDismissAfterConfirmation(boolean dismiss) {
+        mDismissAfterConfirmation = dismiss;
+    }
+
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         if (DEBUG) Log.v(TAG, "onInterceptTouchEvent()");
         return mSwipeHelper.onInterceptTouchEvent(ev) ||
@@ -263,12 +282,45 @@
     }
 
     public void onChildTriggered(View v) {
+        mCallback.handleFloat(v);
     }
 
     public void onBeginDrag(View v) {
         // We do this so the underlying ScrollView knows that it won't get
         // the chance to intercept events anymore
         requestDisallowInterceptTouchEvent(true);
+
+        final Context context = getContext();
+        int swipeStatus = Settings.System.getInt(context.getContentResolver(),
+                Settings.System.RECENTS_SWIPE_FLOATING, 0);
+
+        if (swipeStatus == 0 || swipeStatus == 3) {
+            mConfirmationDialogAnswered = false;
+            mDismissAfterConfirmation = false;
+
+            SettingConfirmationHelper.showConfirmationDialogForSetting(
+                context,
+                context.getString(R.string.recents_swipe_floating_title),
+                context.getString(R.string.recents_swipe_floating_message_portrait),
+                context.getResources().getDrawable(R.drawable.recents_swipe_floating_portrait),
+                Settings.System.RECENTS_SWIPE_FLOATING,
+                new SettingConfirmationHelper.OnSelectListener() {
+                    @Override
+                    public void onSelect(boolean enabled) {
+                        if (enabled){
+                            mSwipeHelper.setTriggerEnabled(true);
+                            mSwipeHelper.setTriggerDirection(SwipeHelper.LEFT);
+                        }
+                        // Dialog finished, recents can safely be dismissed later
+                        mConfirmationDialogAnswered = true;
+                        if (mDismissAfterConfirmation) {
+                            // Recents is already empty, so dismiss right after
+                            // this dialog
+                            mCallback.dismiss();
+                        }
+                    }
+                });
+        }
     }
 
     public void onDragCancelled(View v) {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
index 931d115..d31f1b2 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
@@ -641,9 +641,9 @@
                 null, UserHandle.CURRENT);
     }
 
-    private void launchFloating(PendingIntent pIntent) {
+    private void launchFloating(PendingIntent pIntent, boolean allowed) {
         Intent overlay = new Intent();
-        overlay.addFlags(Intent.FLAG_FLOATING_WINDOW | Intent.FLAG_ACTIVITY_CLEAR_TASK);
+        if (allowed) overlay.addFlags(Intent.FLAG_FLOATING_WINDOW | Intent.FLAG_ACTIVITY_CLEAR_TASK);
         try {
             ActivityManagerNative.getDefault().resumeAppSwitches();
             ActivityManagerNative.getDefault().dismissKeyguardOnNextActivity();
@@ -694,7 +694,7 @@
                                     animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_NONE);
                                     Toast.makeText(mContext, text, duration).show();
                                 } else {
-                                    launchFloating(contentIntent);
+                                    launchFloating(contentIntent, true);
                                     animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_NONE);
                                 }
                             } else {
@@ -1151,7 +1151,11 @@
                 // System is dead
             }
 
-            if (mPendingIntent != null) {
+            if (mPile.launchNextNotificationFloating()) {
+                if (mPendingIntent != null) {
+                    launchFloating(mPendingIntent, allowed);
+                }
+            } else if (mPendingIntent != null) {
                 int[] pos = new int[2];
                 v.getLocationOnScreen(pos);
                 Intent overlay = new Intent();
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/NotificationRowLayout.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/NotificationRowLayout.java
index 5d18bea..80d15dc 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/NotificationRowLayout.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/NotificationRowLayout.java
@@ -21,8 +21,10 @@
 import android.content.Context;
 import android.content.res.Configuration;
 import android.graphics.Rect;
+import android.provider.Settings;
 import android.util.AttributeSet;
 import android.util.Log;
+import android.util.SettingConfirmationHelper;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewConfiguration;
@@ -47,6 +49,8 @@
 
     private static final int APPEAR_ANIM_LEN = SLOW_ANIMATIONS ? 5000 : 250;
     private static final int DISAPPEAR_ANIM_LEN = APPEAR_ANIM_LEN;
+
+    private boolean mFloatNextNotification = false;
 
     boolean mAnimateBounds = true;
 
@@ -95,7 +99,14 @@
 
         float densityScale = getResources().getDisplayMetrics().density;
         float pagingTouchSlop = ViewConfiguration.get(mContext).getScaledPagingTouchSlop();
+
         mSwipeHelper = new SwipeHelper(SwipeHelper.X, this, densityScale, pagingTouchSlop);
+
+        if (Settings.System.getInt(context.getContentResolver(),
+            Settings.System.STATUS_BAR_NOTIFICATION_SWIPE_FLOATING, 0) == 1) {
+            mSwipeHelper.setTriggerEnabled(true);
+            mSwipeHelper.setTriggerDirection(SwipeHelper.LEFT);
+        }
     }
 
     public void setLongPressListener(View.OnLongClickListener listener) {
@@ -104,6 +115,12 @@
 
     public void setOnSizeChangedListener(OnSizeChangedListener l) {
         mOnSizeChangedListener = l;
+    }
+
+    public boolean launchNextNotificationFloating() {
+        boolean floatNext = mFloatNextNotification;
+        mFloatNextNotification = false;
+        return floatNext;
     }
 
     @Override
@@ -175,12 +192,37 @@
     }
 
     public void onChildTriggered(View v) {
+        if (DEBUG) Log.v(TAG, "onChildTriggered: " + v);
+        if (v != null && v instanceof ExpandableNotificationRow) {
+            mFloatNextNotification = true;
+            ViewGroup content = (ViewGroup)v.findViewById(R.id.content);
+            if (content != null) {
+                content.performClick();
+            }
+        }
     }
 
     public void onBeginDrag(View v) {
         // We need to prevent the surrounding ScrollView from intercepting us now;
         // the scroll position will be locked while we swipe
         requestDisallowInterceptTouchEvent(true);
+
+        final Context context = getContext();
+        SettingConfirmationHelper.showConfirmationDialogForSetting(
+            context,
+            context.getString(R.string.status_bar_notification_swipe_floating_title),
+            context.getString(R.string.status_bar_notification_swipe_floating_message),
+            context.getResources().getDrawable(R.drawable.status_bar_notification_swipe_floating),
+            Settings.System.STATUS_BAR_NOTIFICATION_SWIPE_FLOATING,
+            new SettingConfirmationHelper.OnSelectListener() {
+                @Override
+                public void onSelect(boolean enabled) {
+                    if (enabled){
+                        mSwipeHelper.setTriggerEnabled(true);
+                        mSwipeHelper.setTriggerDirection(SwipeHelper.LEFT);
+                    }
+                }
+            });
     }
 
     public void onDragCancelled(View v) {
